//https://howtodoinjava.com/algorithm/merge-sort-java-example/
testSortOn2Arrays();

def testSortOn2Arrays() {
    float array1 [6];
    array1 = new float[8];
    array1[0] = 45;
    array1[1] = 23;
    array1[2] = 12;
    array1[3] = 964;
    array1[4] = 3;
    array1[5] = 124;

    mergeSort(array1);

    print array1;

    float array2 [8];
    array2 = new float[5];
    array2[0] = 23;
    array2[1] = 53;
    array2[2] = 72;
    array2[3] = 109;
    array2[4] = 13;
    array2[5] = 9;
    array2[6] = 2;
    array2[7] = 213; 

    mergeSort(array2);

    print array2;
}
 
def mergeSort(float list[]) {
	//If list is empty; no need to do anything
	if (list.length <= 1) {
		return list;
	}
	         
	//Split the array in half in two parts
	float first [list.length / 2];
    first = new float[list.length / 2];

    float second [list.length - first.length];
    second = new float[list.length - first.length];

    int i;

    for(i = 0; i < first.length; i = i + 1) {
    	first[i] = list[i];
    }

    for(i = 0; i < second.length; i = i + 1) {
    	second[i] = list[i + first.length];
    }
	         
	//Sort each half recursively
	mergeSort(first);
	mergeSort(second);
	         
	//Merge both halves together, overwriting to original array
	merge(first, second, list);
	return list;
}
     
def merge(float first[], float second[], float result[]) {
    //Index Position in first array - starting with first element
    int iFirst;
    iFirst = 0;
         
    //Index Position in second array - starting with first element
    int iSecond;
    iSecond = 0;
         
    //Index Position in merged array - starting with first position
    int iMerged;
    iMerged = 0;
         
    //Compare elements at iFirst and iSecond, 
    //and move smaller element at iMerged
    int i;
    for(i = 0; i != 0; i = 0){
        if (iFirst < first.length) {
        	if (iSecond < second.length) {
        		break;
        	}
        }

        if (first[iFirst] < second[iSecond]) {
            result[iMerged] = first[iFirst];
            iFirst = iFirst + 1;
        } else {
            result[iMerged] = second[iSecond];
            iSecond = iSecond + 1;
        }

        iMerged = iMerged + 1;
    }

    //copy remaining elements from both halves - each half will have already sorted elements
    for(i = 0; i < first.length - iFirst; i = i + 1) {
    	result[iMerged + i] = first[iFirst + i];
    }

    for(i = 0; i < second.length - iSecond; i = i + 1) {
    	result[iMerged + i] = first[iSecond + i];
    }
}